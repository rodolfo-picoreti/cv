function [] = plotWorld (handles)

  %% --- Object Position in the World
  Robj = ...
    Rz(str2num(get(handles.editObjRZ, 'String')))* ...
    Ry(str2num(get(handles.editObjRY, 'String')))* ...
    Rx(str2num(get(handles.editObjRX, 'String')));
  
  Tobj = T(...
    str2num(get(handles.editObjTX, 'String')), ...
    str2num(get(handles.editObjTY, 'String')), ...
    str2num(get(handles.editObjTZ, 'String')) ...
  );

  Vobj = Tobj*Robj*handles.object.V;

  %% --- Camera Position in the World
  Rcam = ...
    Rz(str2num(get(handles.editCamRZ, 'String')))* ...
    Ry(str2num(get(handles.editCamRY, 'String')))* ...
    Rx(str2num(get(handles.editCamRX, 'String')));
  
  Tcam = T(...
    str2num(get(handles.editCamTX, 'String')), ...
    str2num(get(handles.editCamTY, 'String')), ...
    str2num(get(handles.editCamTZ, 'String')) ...
  );

  Vcam = Tcam*Rcam*handles.camera.V;

  %% --- Plot World 
  axes(handles.worldFigure);
  cla
  hold on
  axis equal;
  view([-25, 30])
  grid on;
  range = [handles.ranges('ObjTX'), handles.ranges('ObjTY'), handles.ranges('ObjTZ')];
  axis(range);

  trisurf(handles.object.F, ...
          Vobj(1,:), ...
          Vobj(2,:), ...
          Vobj(3,:), ...
          'FaceColor', 'r', 'EdgeColor', 'none');

  trisurf(handles.camera.F, ...
          Vcam(1,:), ...
          Vcam(2,:), ...
          Vcam(3,:), ...
          'FaceColor', 'b', 'EdgeColor', 'none');

  
  %% --- Camera Projection
  H = inv(Tcam*Rcam); % world to camera
  P = [eye(3) zeros(3,1)];
  
  f = 50;
  Kf = [ ...
    f    0    0; ...
    0    f    0; ...
    0    0    1  ...
  ];
  
  w = 640;
  h = 480;
  
  sx = 10; 
  sy = 10; 
  ox = w/2;
  oy = h/2;
  
  Ks = [ ...
    -sx    0   ox; ...
    0    -sy   oy; ...
    0     0    1  ...
  ];
  
  Vobj_cam = Ks*Kf*P*H*Vobj;

  Vobj_cam(1, :) = Vobj_cam(1, :)./Vobj_cam(3, :);
  Vobj_cam(2, :) = Vobj_cam(2, :)./Vobj_cam(3, :);

  %% --- Plot Projection
  axes(handles.cameraFigure);
  cla
  hold on
  axis equal;
  set(gca, 'Ydir', 'reverse')
  axis([0, w, 0, h]);

  plot(Vobj_cam(1,:), Vobj_cam(2,:));
