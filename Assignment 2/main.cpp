#include <armadillo> // -larmadillo
#include <cstdint>
#include <iostream>

namespace congo {

namespace ransack {

struct options {
/* 
  .max_iter: the maximum number of iterations allowed in the algorithm
  .threshold: a threshold value for determining when a data point fits a model
  .n: the minimum number of data values required to fit the model
  .d: the number of close data values required to assert that a 
    model fits well to data
*/
  uint_fast32_t max_iter;
  uint_fast32_t n_fit;
  uint_fast32_t n_assert;
  
  double threshold; 
};

/* 
  @description: generate vector with random unique integer 
    values from [first, last).
*/
arma::uvec rand_uniq(uint_fast32_t&& first, uint_fast32_t&& last) {
  arma::uvec range = arma::regspace<arma::uvec>(first, last-1);
  return arma::shuffle(range);
}


void fit(arma::mat data, options opt) {

  uint_fast32_t iter = 0;
  while (iter < opt.max_iter) {
    
    ++iter;
  }
}

} // ::ransack 

} // ::congo 


int main() {
  using namespace arma;
  arma_rng::set_seed_random();
 
  congo::ransack::options opt {
    .max_iter = 100,
    .n_fit = 2,
    .n_assert = 5,
    .threshold = 1e-12
  };

  mat points1 = zeros(2, 10);
  points1.row(0) = regspace<mat>(1, 10).t();
  points1.row(1) = regspace<mat>(1, 10).t()*2.5 + 3;

  mat points2 = zeros(2, 10);
  points2.row(0) = regspace<mat>(1, 10).t();
  points2.row(1) = regspace<mat>(1, 10).t()*5 + 7;

  uvec range = regspace<uvec>(0, points1.n_cols-1);
  uvec indices = shuffle(range);
  
  // n_fit randomly selected values from data
  mat maybe_inliers1 = points1.cols(indices.head(opt.n_fit));
  mat maybe_inliers2 = points2.cols(indices.head(opt.n_fit));
  
  // model parameters fitted to maybe_inliers
  mat maybe_model = pinv(maybe_inliers1)*maybe_inliers2;

  // calculate error generated by maybe_model
  mat diff = points2 - maybe_model*points1;
  mat error = zeros(1, diff.n_cols);

  uvec selector = find(error < opt.threshold);
  // this implies that we may have found a good model
  if (selector.n_rows > opt.n_assert) {
    mat inliers1 = points1.elem(selector);
    mat inliers2 = points2.elem(selector);
    
    // model parameters fitted to all points in maybeinliers and alsoinliers
    mat better_model = pinv(inliers1)*inliers2;

    // if the cost function for this model is smaller
  }

  diff.print();
}